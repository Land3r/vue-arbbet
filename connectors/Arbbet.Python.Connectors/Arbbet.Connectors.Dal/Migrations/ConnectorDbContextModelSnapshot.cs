// <auto-generated />
using System;
using Arbbet.Connectors.Dal;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Arbbet.Connectors.Dal.Migrations
{
    [DbContext(typeof(ConnectorDbContext))]
    partial class ConnectorDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.3")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Arbbet.Domain.Entities.Bet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BetType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid?>("PlatformId")
                        .HasColumnType("uuid");

                    b.Property<string>("Platform_Id")
                        .HasColumnType("text");

                    b.Property<Guid?>("UnifiedEntityId")
                        .HasColumnType("uuid");

                    b.Property<int>("UnifiedType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("PlatformId");

                    b.HasIndex("UnifiedEntityId");

                    b.ToTable("Bets");
                });

            modelBuilder.Entity("Arbbet.Domain.Entities.Competition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CountryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid?>("PlatformId")
                        .HasColumnType("uuid");

                    b.Property<string>("Platform_Id")
                        .HasColumnType("text");

                    b.Property<Guid?>("UnifiedEntityId")
                        .HasColumnType("uuid");

                    b.Property<string>("UnifiedType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("PlatformId");

                    b.HasIndex("UnifiedEntityId");

                    b.ToTable("Competitions");
                });

            modelBuilder.Entity("Arbbet.Domain.Entities.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Arbbet.Domain.Entities.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CompetitionId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid?>("PlatformId")
                        .HasColumnType("uuid");

                    b.Property<string>("Platform_Id")
                        .HasColumnType("text");

                    b.Property<Guid?>("UnifiedEntityId")
                        .HasColumnType("uuid");

                    b.Property<string>("UnifiedType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Url")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CompetitionId");

                    b.HasIndex("PlatformId");

                    b.HasIndex("UnifiedEntityId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("Arbbet.Domain.Entities.Outcome", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BetId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Odd")
                        .HasColumnType("numeric");

                    b.Property<string>("OutcomeType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("TeamId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BetId");

                    b.HasIndex("TeamId");

                    b.ToTable("Outcomes");
                });

            modelBuilder.Entity("Arbbet.Domain.Entities.Platform", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Platforms");

                    b.HasData(
                        new
                        {
                            Id = new Guid("01cb8b1d-5b7f-4545-aba0-a0b8bd46b9bf"),
                            Code = "FDJ",
                            Name = "FDJ"
                        });
                });

            modelBuilder.Entity("Arbbet.Domain.Entities.Sport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid?>("PlatformId")
                        .HasColumnType("uuid");

                    b.Property<string>("Platform_Id")
                        .HasColumnType("text");

                    b.Property<Guid?>("UnifiedEntityId")
                        .HasColumnType("uuid");

                    b.Property<string>("UnifiedType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PlatformId");

                    b.HasIndex("UnifiedEntityId");

                    b.ToTable("Sports");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0405459e-dff5-4e98-9f18-cde23fe456ae"),
                            Code = "FOO",
                            Name = "Football",
                            PlatformId = new Guid("01cb8b1d-5b7f-4545-aba0-a0b8bd46b9bf"),
                            Platform_Id = "100",
                            UnifiedType = "Master"
                        },
                        new
                        {
                            Id = new Guid("a588cc21-4797-4916-95ec-fc54e7bacd44"),
                            Code = "TEN",
                            Name = "Tennis",
                            PlatformId = new Guid("01cb8b1d-5b7f-4545-aba0-a0b8bd46b9bf"),
                            Platform_Id = "600",
                            UnifiedType = "Master"
                        },
                        new
                        {
                            Id = new Guid("4c855310-ec82-48dd-9ba5-9bd611804d4e"),
                            Code = "BAS",
                            Name = "Basketball",
                            PlatformId = new Guid("01cb8b1d-5b7f-4545-aba0-a0b8bd46b9bf"),
                            Platform_Id = "601600",
                            UnifiedType = "Master"
                        },
                        new
                        {
                            Id = new Guid("6dc779c4-113f-4aa5-855a-65959b0426cf"),
                            Code = "RUG",
                            Name = "Rugby",
                            PlatformId = new Guid("01cb8b1d-5b7f-4545-aba0-a0b8bd46b9bf"),
                            Platform_Id = "964500",
                            UnifiedType = "Master"
                        },
                        new
                        {
                            Id = new Guid("b3082cf0-1ce3-4ee0-8a2a-105055f3d851"),
                            Code = "VOL",
                            Name = "Volley",
                            PlatformId = new Guid("01cb8b1d-5b7f-4545-aba0-a0b8bd46b9bf"),
                            Platform_Id = "1200",
                            UnifiedType = "Master"
                        },
                        new
                        {
                            Id = new Guid("43730787-c53e-49a1-80a2-4db01d95d38a"),
                            Code = "HAN",
                            Name = "Handball",
                            PlatformId = new Guid("01cb8b1d-5b7f-4545-aba0-a0b8bd46b9bf"),
                            Platform_Id = "1100",
                            UnifiedType = "Master"
                        },
                        new
                        {
                            Id = new Guid("ca33fb07-fd55-4c25-8ef9-7a62e75be407"),
                            Code = "HOC",
                            Name = "Hockey",
                            PlatformId = new Guid("01cb8b1d-5b7f-4545-aba0-a0b8bd46b9bf"),
                            Platform_Id = "2100",
                            UnifiedType = "Master"
                        },
                        new
                        {
                            Id = new Guid("3478ac3e-b02b-46ab-9db4-716519476f73"),
                            Code = "BOX",
                            Name = "Boxe",
                            PlatformId = new Guid("01cb8b1d-5b7f-4545-aba0-a0b8bd46b9bf"),
                            Platform_Id = "364800",
                            UnifiedType = "Master"
                        });
                });

            modelBuilder.Entity("Arbbet.Domain.Entities.Team", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CountryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid?>("PlatformId")
                        .HasColumnType("uuid");

                    b.Property<string>("Platform_Id")
                        .HasColumnType("text");

                    b.Property<string>("TeamType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("UnifiedEntityId")
                        .HasColumnType("uuid");

                    b.Property<string>("UnifiedType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("PlatformId");

                    b.HasIndex("UnifiedEntityId");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("EventTeam", b =>
                {
                    b.Property<Guid>("EventsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ParticipantsId")
                        .HasColumnType("uuid");

                    b.HasKey("EventsId", "ParticipantsId");

                    b.HasIndex("ParticipantsId");

                    b.ToTable("EventTeam");
                });

            modelBuilder.Entity("Arbbet.Domain.Entities.Bet", b =>
                {
                    b.HasOne("Arbbet.Domain.Entities.Event", "Event")
                        .WithMany("Bets")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Arbbet.Domain.Entities.Platform", "Platform")
                        .WithMany()
                        .HasForeignKey("PlatformId");

                    b.HasOne("Arbbet.Domain.Entities.Bet", "UnifiedEntity")
                        .WithMany()
                        .HasForeignKey("UnifiedEntityId");

                    b.Navigation("Event");

                    b.Navigation("Platform");

                    b.Navigation("UnifiedEntity");
                });

            modelBuilder.Entity("Arbbet.Domain.Entities.Competition", b =>
                {
                    b.HasOne("Arbbet.Domain.Entities.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("Arbbet.Domain.Entities.Platform", "Platform")
                        .WithMany()
                        .HasForeignKey("PlatformId");

                    b.HasOne("Arbbet.Domain.Entities.Competition", "UnifiedEntity")
                        .WithMany()
                        .HasForeignKey("UnifiedEntityId");

                    b.Navigation("Country");

                    b.Navigation("Platform");

                    b.Navigation("UnifiedEntity");
                });

            modelBuilder.Entity("Arbbet.Domain.Entities.Event", b =>
                {
                    b.HasOne("Arbbet.Domain.Entities.Competition", "Competition")
                        .WithMany()
                        .HasForeignKey("CompetitionId");

                    b.HasOne("Arbbet.Domain.Entities.Platform", "Platform")
                        .WithMany()
                        .HasForeignKey("PlatformId");

                    b.HasOne("Arbbet.Domain.Entities.Event", "UnifiedEntity")
                        .WithMany()
                        .HasForeignKey("UnifiedEntityId");

                    b.Navigation("Competition");

                    b.Navigation("Platform");

                    b.Navigation("UnifiedEntity");
                });

            modelBuilder.Entity("Arbbet.Domain.Entities.Outcome", b =>
                {
                    b.HasOne("Arbbet.Domain.Entities.Bet", "Bet")
                        .WithMany("Outcomes")
                        .HasForeignKey("BetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Arbbet.Domain.Entities.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId");

                    b.Navigation("Bet");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Arbbet.Domain.Entities.Sport", b =>
                {
                    b.HasOne("Arbbet.Domain.Entities.Platform", "Platform")
                        .WithMany()
                        .HasForeignKey("PlatformId");

                    b.HasOne("Arbbet.Domain.Entities.Sport", "UnifiedEntity")
                        .WithMany()
                        .HasForeignKey("UnifiedEntityId");

                    b.Navigation("Platform");

                    b.Navigation("UnifiedEntity");
                });

            modelBuilder.Entity("Arbbet.Domain.Entities.Team", b =>
                {
                    b.HasOne("Arbbet.Domain.Entities.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("Arbbet.Domain.Entities.Platform", "Platform")
                        .WithMany()
                        .HasForeignKey("PlatformId");

                    b.HasOne("Arbbet.Domain.Entities.Team", "UnifiedEntity")
                        .WithMany()
                        .HasForeignKey("UnifiedEntityId");

                    b.Navigation("Country");

                    b.Navigation("Platform");

                    b.Navigation("UnifiedEntity");
                });

            modelBuilder.Entity("EventTeam", b =>
                {
                    b.HasOne("Arbbet.Domain.Entities.Event", null)
                        .WithMany()
                        .HasForeignKey("EventsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Arbbet.Domain.Entities.Team", null)
                        .WithMany()
                        .HasForeignKey("ParticipantsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Arbbet.Domain.Entities.Bet", b =>
                {
                    b.Navigation("Outcomes");
                });

            modelBuilder.Entity("Arbbet.Domain.Entities.Event", b =>
                {
                    b.Navigation("Bets");
                });
#pragma warning restore 612, 618
        }
    }
}
